from controller import Robot
from controller import Motor
from controller import DistanceSensor
from controller import Camera
from controller import LED
from controller import Supervisor
import math
#---------------Khởi tạo thông tin robot---------------#
# KHÔNG CHỈNH SỬA TIME_STEP !!!
# Robot
robot = Robot()
# Time step
TIME_STEP = 8
# Camera     
cam = robot.getDevice("camera")
# Leff motor, Right motor   
lm = robot.getDevice("left wheel motor")
rm = robot.getDevice("right wheel motor")
# Sensors
NB_GROUND_SENS = 8
gs = []
gsNames = [
    'gs0', 'gs1', 'gs2', 'gs3',
    'gs4', 'gs5', 'gs6', 'gs7'
]
ds = robot.getDevice("ds_center")
# LEDs
NB_LEDS = 5
leds = []
led_Names = [
    'led0', 'led1', 'led2', 'led3', 'led4'
]
# Hàm đợi để khởi tạo robot
# KHÔNG ĐƯỢC CHỈNH SỬA!!!
initTime = robot.getTime()
while robot.step(TIME_STEP) != -1:
    if (robot.getTime() - initTime) * 1000.0 > 200:
        break

#---------------Phần code code set up---------------#

# Time step
robot.step(TIME_STEP)

# Motor
lm.setPosition(float("inf"))
lm.setVelocity(0)
rm.setPosition(float("inf"))
rm.setVelocity(0)

# Camera
cam.enable(64)

# Sensors
for i in range(NB_GROUND_SENS):
    gs.append(robot.getDevice(gsNames[i]))
    gs[i].enable(TIME_STEP)


ds.enable(TIME_STEP)


# LEDs    
for i in range(NB_LEDS):
    leds.append(robot.getDevice(led_Names[i]))

# Điều khiển LED
def LED_Alert():
    if (robot.getTime() - initTime)*1000 % 3000 >= 2000:
        leds[1].set(1)
    return




#-------------------Define-------------------#
time = 0
threshold = [300 , 300 , 300 , 300 , 300 , 300 , 300 , 300]
NOP = 0.1
#----------Speed----------#
speed_max = 0
speed_min1 = 0
speed_min2 = 0
speed_min3 = 0
speed_min4 = 0

#----------Signal----------#

chinh_giua = 0
lech_phai1 = 1
lech_trai1 = -1
lech_phai2 = 2
lech_trai2 = -3
lech_phai3 = 4
lech_trai3 = -4
lech_phai4 = -5
lech_trai4 = 5
re_phai = -6
re_trai = 6
full_trang  = 7
full_den = -8

#----------Def_motor----------#

def di_thang():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max)
 
def chinh_phai1():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max - speed_min)
  
def chinh_trai1():
    lm.setVelocit(speed_max - speed_min)
    rm.setVelocity(speed_max)
    
def chinh_phai2():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max - speed_min)
  
def chinh_trai2():
    lm.setVelocit(speed_max - speed_min)
    rm.setVelocity(speed_max)
    
def chinh_phai3():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max - speed_min)
  
def chinh_trai3():
    lm.setVelocit(speed_max - speed_min)
    rm.setVelocity(speed_max)
    
def chinh_phai4():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max - speed_min)
  
def chinh_trai4():
    lm.setVelocit(speed_max - speed_min)
    rm.setVelocity(speed_max)
    
#----------Turn----------#
    
def re_phai1():
    lm.setVelocit(speed_max)
    rm.setVelocity(speed_max - speed_min)
  
def re_trai1():
    lm.setVelocit(speed_max - speed_min)
    rm.setVelocity(speed_max)

#----------Def_sensor----------#
def ReadSensors():
    gsValues = []
    filted = 0x00
    for i in range(NB_GROUND_SENS):
        gsValues.append(gs[i].getValue())
        if gsValues[i] < threshold[i]:
            filted |= (0x01 << (NB_GROUND_SENS - i - 1))
    return filted


#----------Get_signal----------#

def DeterminePosition(filted):

    if filted == 0b00011000:
        return chinh_giua
    
    elif filted == 0b00010000:
        return lech_phai1
    elif filted == 0b00001000:
        return lech_trai1 
    
    elif filted in [0b00110000]:
        return lech_phai2
    elif filted in [0b00001100]:
        return lech_trai2
    
    elif filted in [0b01100000,0b00100000]:
        return lech_phai3
    elif filted in [0b00000110,0b00000100]:
        return lech_trai3

    elif filted in [0b11000000,0b10000000,0b01000000]:
        return lech_phai4
    elif filted in [0b00000011,0b00000001,0b00000010]:
        return lech_trai4
    
    elif filted in [0b00001110,0b00011111,0b00001111,0b00000111]:
        return re_phai
    elif filted in [0b01110000,0b11111000,0b11110000,0b11100000]:
        return re_trai

    elif filted in [0b11111111,0b01111110,0b01111111,0b11111110]:
        return full_trang
    elif filted in [0b00000000]:
        return full_den

    return NOP
    
#-------------Main_code-------------#

while robot.step(TIME_STEP) != -1:
    time = time + 1
    filted = ReadSensors()
    global ds_value
    dis = ds.getValue()
    pos = DeterminePosition(filted)
    print(" ")
    print('Pos: ' + str(format(filted, '08b')), end='   ')
    
    if pos == MID:
        di_thang()
